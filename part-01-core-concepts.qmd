---
title: "Part 1: Core Concepts"
subtitle: "Notes and worked examples from 'Efficient Linux at the Command Line'"
# format: markdown_github
knitr:
  opts_chunk: 
    collapse: true
    comment: "#"
    echo: true
    eval: true
---

## Input, output, pipes

The introduction covers `stdin` and `stdout`, how to combine these commands with `ls`, `less`, and the pipe (`|`):

> **`stdin`**: The stream of input that Linux reads from your keyboard.
>
> **`stdout`**: The stream of output that Linux writes to your display. 

```{bash}
ls -l ex/ch01
```

In the `ex/ch01/command_1_wc` folder, you'll see `myfile`. If we run `less` on `myfile`, we see the file displayed one screenful at a time:

```{bash}
less ex/ch01/command_1_wc/myfile
```

## Commands 

This section has a great definition and description of **commands** in Linux: 

**A program**: An executable program named and executed by a single word, such as `ls`, or a similar feature built into the shell, such as cd (called a shell builtin)

**A simple command**: A program name (or shell builtin) optionally followed by arguments, such as `ls -l /bin`

**A combined command**: Several simple commands treated as a unit, such as the pipeline `ls -l /bin | less`

### Combining Commands 

> "*You can connect the `stdout` of one command to the `stdin` of another, so the first command feeds the second.*"

We can connect `ls -l` and `less` using the pipe: 

```{bash}
ls -l ex/ch01/command_1_wc | less
```

List the contents of a large directory with `ls -l`, then pass this to `less` to make it more human readable.

> "*You can connect these two commands because `ls` writes to `stdout` and `less` can read from `stdin`.*"

This chapter covers an intro to six common Linux commands: `wc`, `head`, `cut`, `grep`, `sort`, and `uniq`

### `wc`

> "*options `-l`, `-w`, and `-c` print only the number of lines, words, and characters*"

```{bash}
wc ex/ch01/command_1_wc/animals.txt
```

```{bash}
wc -l ex/ch01/command_1_wc/animals.txt
```

```{bash}
wc -w ex/ch01/command_1_wc/animals.txt
```

```{bash}
wc -c ex/ch01/command_1_wc/animals.txt
```

## `ls` weirdness

The `ls` command will change it's behavior depending on `stdout` and `stdin`

If the `stdout` is redirected (like with `cat`), then 

```{bash}
ls ex/ch01 | cat
```

### `head`

```{bash}
wc ex/ch01/command_1_wc/animals.txt
```

### `cut`

### `grep`

### `sort`

### `uniq`


## The Shell

## Variables 

## Re-running Commands 

## Filesystem